!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACK	util.h	18;"	d
ACKP	util.h	26;"	d
APP_PKT	util.h	21;"	d
FALSE	main.h	15;"	d
FINISH	util.h	22;"	d
FLAGS	Makefile	/^FLAGS=-g$/;"	m
HEADERS	Makefile	/^HEADERS=$(SOURCES:.cpp=.h)$/;"	m
InFinish	util.h	/^    InFinish,$/;"	e	enum:__anon2
InMonitor	util.h	/^    InMonitor,$/;"	e	enum:__anon2
InPortalQueue	util.h	/^    InPortalQueue$/;"	e	enum:__anon2
InRun	util.h	/^    InRun,$/;"	e	enum:__anon2
InSection	util.h	/^    InSection,$/;"	e	enum:__anon2
InWant	util.h	/^    InWant,$/;"	e	enum:__anon2
K	util.h	29;"	d
MPI_PAKIET_T	util.cpp	/^MPI_Datatype MPI_PAKIET_T;$/;"	v
NITEMS	util.h	14;"	d
P	util.h	30;"	d
RELEASE	util.h	20;"	d
REQUEST	util.h	19;"	d
REQUESTK	util.h	25;"	d
ROOT	main.h	18;"	d
S	util.h	28;"	d
SEC_IN_STATE	main.h	16;"	d
SOURCES	Makefile	/^SOURCES=$(wildcard *.cpp)$/;"	m
STATE_CHANGE_PROB	main.h	17;"	d
TRUE	main.h	14;"	d
WATEK_KOMUNIKACYJNY_H	watek_komunikacyjny.h	3;"	d
ZLECENIE	util.h	24;"	d
changeState	util.cpp	/^void changeState(state_t newState)$/;"	f
checkOlder	util.cpp	/^int checkOlder()$/;"	f
check_thread_support	main.cpp	/^void check_thread_support(int provided)$/;"	f
compare	util.cpp	/^bool compare(const std::pair<int, int> &pair1, const std::pair<int, int> &pair2)$/;"	f
data	util.h	/^    int data; \/* przykładowe pole z danymi; można zmienić nazwę na bardziej pasującą *\/$/;"	m	struct:__anon1
debug	main.h	54;"	d
debug	main.h	56;"	d
finalizuj	main.cpp	/^void finalizuj()$/;"	f
get_lab	setupmpi.txt	/^function get_lab() {$/;"	f
header	setupmpi.txt	/^function header$/;"	f
id_skansenu	main.cpp	/^int rank, size, id_skansenu;$/;"	v
id_zlecenia	main.cpp	/^int id_zlecenia = -1;$/;"	v
inicjuj_typ_pakietu	util.cpp	/^void inicjuj_typ_pakietu()$/;"	f
init_env	setupmpi.txt	/^function init_env() {$/;"	f
init_ssh	setupmpi.txt	/^function init_ssh() {$/;"	f
init_student	setupmpi.txt	/^function init_student() { #$/;"	f
kolejka_do_portali	main.cpp	/^    std::vector<std::pair<int, int>> kolejka_do_portali;$/;"	v
kolejka_krasnali	main.cpp	/^    std::vector<std::pair<int, int>> kolejka_krasnali;$/;"	v
kolejka_zlecen	main.cpp	/^    std::vector<std::pair<int, int>> kolejka_zlecen;$/;"	v
lampMut	util.cpp	/^pthread_mutex_t lampMut = PTHREAD_MUTEX_INITIALIZER;$/;"	v
lamport	util.cpp	/^int lamport = 0;$/;"	v
main	main.cpp	/^int main(int argc, char **argv)$/;"	f
mainLoop	watek_glowny.cpp	/^void mainLoop()$/;"	f
name	util.cpp	/^    const char *name;$/;"	m	struct:tagNames_t	file:
packet_t	util.h	/^} packet_t;$/;"	t	typeref:struct:__anon1
print_kolejka	util.cpp	/^void print_kolejka(std::vector<std::pair<int, int>> *v)$/;"	f
printerr	setupmpi.txt	/^function printerr$/;"	f
println	main.h	60;"	d
rank	main.cpp	/^int rank, size, id_skansenu;$/;"	v
sendPacket	util.cpp	/^void sendPacket(packet_t *pkt, int destination, int tag, int inc)$/;"	f
shaded_line	setupmpi.txt	/^function shaded_line$/;"	f
size	main.cpp	/^int rank, size, id_skansenu;$/;"	v
skansen	watek_zlecen.cpp	/^void skansen()$/;"	f
sort_kolejka	util.cpp	/^void sort_kolejka(std::vector<std::pair<int, int>> *v)$/;"	f
src	util.h	/^    int src;$/;"	m	struct:__anon1
stan	util.cpp	/^state_t stan = InRun;$/;"	v
startKomWatek	watek_komunikacyjny.cpp	/^void *startKomWatek(void *ptr)$/;"	f
stateMut	util.cpp	/^pthread_mutex_t stateMut = PTHREAD_MUTEX_INITIALIZER;$/;"	v
state_t	util.h	/^} state_t;$/;"	t	typeref:enum:__anon2
tag	util.cpp	/^    int tag;$/;"	m	struct:tagNames_t	file:
tag2string	util.cpp	/^const char *const tag2string(int tag)$/;"	f
tagNames	util.cpp	/^} tagNames[] = {{"pakiet aplikacyjny", APP_PKT}, {"finish", FINISH}, {"potwierdzenie", ACK}, {"prośbę o sekcję krytyczną", REQUEST}, {"zwolnienie sekcji krytycznej", RELEASE}, {"prośba o wpisanie do kolejki kranslai", REQUESTK}};$/;"	v	typeref:struct:tagNames_t
tagNames_t	util.cpp	/^struct tagNames_t$/;"	s	file:
task	util.h	/^    int task;$/;"	m	struct:__anon1
threadKom	main.cpp	/^pthread_t threadKom;$/;"	v
threadSkansen	main.cpp	/^pthread_t threadSkansen;$/;"	v
timestamps	main.cpp	/^    int timestamps[K + 1] = {0};$/;"	v
ts	util.h	/^    int ts; \/* timestamp (zegar lamporta *\/$/;"	m	struct:__anon1
update_repo	setupmpi.txt	/^function update_repo() {$/;"	f
usun_z_kolejki	util.cpp	/^void usun_z_kolejki(std::vector<std::pair<int, int>> *v, int id)$/;"	f
warn	setupmpi.txt	/^function warn$/;"	f
which_in_queue	util.cpp	/^int which_in_queue(std::vector<std::pair<int, int>> *v, int id)$/;"	f
